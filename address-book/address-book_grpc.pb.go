// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: address-book.proto

package address_book

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AddAddressBook_AddAddress_FullMethodName = "/AddAddressBook/AddAddress"
)

// AddAddressBookClient is the client API for AddAddressBook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddAddressBookClient interface {
	AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error)
}

type addAddressBookClient struct {
	cc grpc.ClientConnInterface
}

func NewAddAddressBookClient(cc grpc.ClientConnInterface) AddAddressBookClient {
	return &addAddressBookClient{cc}
}

func (c *addAddressBookClient) AddAddress(ctx context.Context, in *AddAddressRequest, opts ...grpc.CallOption) (*AddAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAddressResponse)
	err := c.cc.Invoke(ctx, AddAddressBook_AddAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddAddressBookServer is the server API for AddAddressBook service.
// All implementations must embed UnimplementedAddAddressBookServer
// for forward compatibility.
type AddAddressBookServer interface {
	AddAddress(context.Context, *AddAddressRequest) (*AddAddressResponse, error)
	mustEmbedUnimplementedAddAddressBookServer()
}

// UnimplementedAddAddressBookServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAddAddressBookServer struct{}

func (UnimplementedAddAddressBookServer) AddAddress(context.Context, *AddAddressRequest) (*AddAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedAddAddressBookServer) mustEmbedUnimplementedAddAddressBookServer() {}
func (UnimplementedAddAddressBookServer) testEmbeddedByValue()                        {}

// UnsafeAddAddressBookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddAddressBookServer will
// result in compilation errors.
type UnsafeAddAddressBookServer interface {
	mustEmbedUnimplementedAddAddressBookServer()
}

func RegisterAddAddressBookServer(s grpc.ServiceRegistrar, srv AddAddressBookServer) {
	// If the following call pancis, it indicates UnimplementedAddAddressBookServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AddAddressBook_ServiceDesc, srv)
}

func _AddAddressBook_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddAddressBookServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddAddressBook_AddAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddAddressBookServer).AddAddress(ctx, req.(*AddAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddAddressBook_ServiceDesc is the grpc.ServiceDesc for AddAddressBook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddAddressBook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AddAddressBook",
	HandlerType: (*AddAddressBookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAddress",
			Handler:    _AddAddressBook_AddAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "address-book.proto",
}

const (
	GetAddressBook_GetAddress_FullMethodName = "/GetAddressBook/GetAddress"
)

// GetAddressBookClient is the client API for GetAddressBook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetAddressBookClient interface {
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error)
}

type getAddressBookClient struct {
	cc grpc.ClientConnInterface
}

func NewGetAddressBookClient(cc grpc.ClientConnInterface) GetAddressBookClient {
	return &getAddressBookClient{cc}
}

func (c *getAddressBookClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAddressResponse)
	err := c.cc.Invoke(ctx, GetAddressBook_GetAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetAddressBookServer is the server API for GetAddressBook service.
// All implementations must embed UnimplementedGetAddressBookServer
// for forward compatibility.
type GetAddressBookServer interface {
	GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error)
	mustEmbedUnimplementedGetAddressBookServer()
}

// UnimplementedGetAddressBookServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGetAddressBookServer struct{}

func (UnimplementedGetAddressBookServer) GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedGetAddressBookServer) mustEmbedUnimplementedGetAddressBookServer() {}
func (UnimplementedGetAddressBookServer) testEmbeddedByValue()                        {}

// UnsafeGetAddressBookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetAddressBookServer will
// result in compilation errors.
type UnsafeGetAddressBookServer interface {
	mustEmbedUnimplementedGetAddressBookServer()
}

func RegisterGetAddressBookServer(s grpc.ServiceRegistrar, srv GetAddressBookServer) {
	// If the following call pancis, it indicates UnimplementedGetAddressBookServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GetAddressBook_ServiceDesc, srv)
}

func _GetAddressBook_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetAddressBookServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetAddressBook_GetAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetAddressBookServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetAddressBook_ServiceDesc is the grpc.ServiceDesc for GetAddressBook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetAddressBook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GetAddressBook",
	HandlerType: (*GetAddressBookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAddress",
			Handler:    _GetAddressBook_GetAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "address-book.proto",
}
